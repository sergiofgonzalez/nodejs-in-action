---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Stage 2 for the CloudFormation template that launches an
  infrastructure consisting in a VPC, two public subnets and
  a private subnet. Within each subnet we create an instance
  representing the bastion host (in a public subnet), a
  proxy server (in the other public subnet), and a web
  server (in a private subnet). See the README.md file
  accompanying the project for more details.

Parameters:

  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'

  IpForBastionSSHAccess:
    Description: 'Public IP address with SSH access to the bastion'
    Type: String
    AllowedPattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'
    ConstraintDescription: 'Enter a valid IPv4 address'

Mappings:
  RegionToAMIMap:
    # Including only three regions for demonstration purposes
    'us-east-1':
      AMI: 'ami-0915bcb5fa77e4892'

    'eu-central-1':
      AMI: 'ami-02f9ea74050d6f812'

    'ap-southeast-1':
      AMI: 'ami-0d06583a13678c938'

Resources:
  # We will be controlling network security with route tables
  # and ACLs, and therefore, we allow all incoming and outgoing
  # traffic
  #
  # This is done for illustration purposes only, in a real case
  # scenario is better to have multi-layered security approach in
  # which you have Network ACLs and Security Groups
  SecurityGroupAllowEverything:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group allowing all incoming and outgoing traffic'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'All-Traffic-Allowed-Security-Group'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'

  # VPC definition
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'my-vpc'

  # Internet Gateway definition and attachment to the VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'my-igw'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public subnet for the bastion host
  SubnetPublicBastionHost:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']   # get first AZ, whichever that is
      CidrBlock: '10.0.1.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'My Public subnet for bastion host'

  # Route Table for bastion host
  RouteTablePublicBastionHost:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  RouteTableAssociationPublicBastionHost:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicBastionHost
      RouteTableId: !Ref RouteTablePublicBastionHost

  RoutePublicBastionHostToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicBastionHost
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  # Network ACL for the bastion host public subnet
  NetworkAclPublicBastionHost:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicBastionHost:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicBastionHost
      NetworkAclId: !Ref NetworkAclPublicBastionHost

  # Inbound Rules for Network ACL for the bastion host public subnet
  NetworkAclEntryInPublicBastionHostSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 100
      Protocol: 6         # tcp(6)
      PortRange:
        From: 22
        To: 22
      RuleAction: 'allow'
      Egress: false
      CidrBlock: !Sub '${IpForBastionSSHAccess}/32'

  # Optional rule to enable Internet connectivity in the bastion
  NetworkAclEntryInPublicBastionHostEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 200
      Protocol: 6         # tcp(6)
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'

  # Outbound Rules for Network ACL for the bastion host public subnet
  NetworkAclEntryOutPublicBastionHostSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 100
      Protocol: 6         # tcp(6)
      PortRange:
        From: 22
        To: 22
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '10.0.0.0/16'

  # required for inbound SSH
  NetworkAclEntryOutPublicBastionHostEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 200
      Protocol: 6         # tcp(6)
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'

  # Optional rule to enable HTTP connectivity in the bastion
  NetworkAclEntryOutPublicBastionHostEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 300
      Protocol: 6         # tcp(6)
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'

  # Optional rule to enable HTTPS connectivity in the bastion
  NetworkAclEntryOutPublicBastionHostEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 400
      Protocol: 6         # tcp(6)
      PortRange:
        From: 443
        To: 443
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'

  ## Stage 2: proxy server subnet

  # Subnet for proxy servers
  SubnetPublicProxy:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']     # get first AZ
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'My Public subnet for proxy servers'

  # Route Table for proxy servers subnet and association
  RouteTablePublicProxy:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicProxy:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicProxy
      RouteTableId: !Ref RouteTablePublicProxy

  # Route rules
  RoutePublicProxyToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicProxy
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  # Network ACL and association
  NetworkAclPublicProxy:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicProxy:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicProxy
      NetworkAclId: !Ref NetworkAclPublicProxy

  # Network ACL rules
  NetworkAclEntryInPublicProxySSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '10.0.1.0/24'    # allow SSH from bastion host

  NetworkAclEntryInPublicProxyHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryInPublicProxyHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: 300
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryInPublicProxyEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: 400
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPublicProxyHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPublicProxyHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'


  NetworkAclEntryOutPublicProxyEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: 300
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'




  # Optional: to enable the bastion host with an IAM role
  BastionHostInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref Role

  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ec2PolicyToDescribeRegions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Sid is an optional identifier, must be unique in the JSON policy
              - Sid: 1
                Effect: Allow
                Action:
                  - 'ec2:DescribeRegions'
                Resource:
                  - '*'

  # bastion host
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionToAMIMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroupAllowEverything
      SubnetId: !Ref Subnet
      Tags:
        - Key: Name
          Value: 'Bastion Host'


  # proxy server
  ProxyServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionToAMIMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref SubnetPublicProxy
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroupAllowEverything
      Tags:
        - Key: Name
          Value: 'Proxy Server'
    DependsOn: VPCGatewayAttachment

Outputs:
  BastionHostPublicName:
    Value: !Sub ${BastionHost.PublicDnsName}
    Description: 'Bastion host public DNS name to connect via SSH with user ec2-user'

